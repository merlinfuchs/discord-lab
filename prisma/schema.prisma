// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  fetchedAt DateTime @updatedAt
}

model DiscordUser {
  id            String   @id
  username      String   @db.Text
  discriminator String   @db.Text
  avatar        String?  @db.Text
  bot           Boolean?
  banner        String?  @db.Text
  accent_color  Int?
  public_flags  Int?

  fetched_at DateTime @updatedAt
}

model DiscordGuild {
  id                         String   @id
  name                       String   @db.Text
  icon                       String?  @db.Text
  splash                     String?  @db.Text
  discovery_splash           String?  @db.Text
  emojis                     Json[]
  features                   String[]
  approximate_member_count   Int?
  approximate_presence_count Int?
  description                String?  @db.Text
  stickers                   Json[]
  instant_invite             String?  @db.Text
  members                    Json[]
  channels                   Json[]
  presence_count             Int?

  fetched_at DateTime @updatedAt
}

model DiscordInvite {
  code                       String    @id
  guild                      Json?
  channel                    Json?
  inviter                    Json?
  target_type                Int?
  target_user                Json?
  target_application         Json?
  approximate_presence_count Int?
  approximate_member_count   Int?
  expires_at                 DateTime?
  guild_scheduled_event      Json?

  fetched_at DateTime @default(now())
}

model DiscordApplication {
  id                                String   @id
  name                              String   @db.Text
  icon                              String?  @db.Text
  description                       String   @db.Text
  bot_public                        Boolean
  bot_require_code_grant            Boolean
  terms_of_service_url              String?  @db.Text
  privacy_policy_url                String?  @db.Text
  verify_key                        String
  primary_sku_id                    String?
  slug                              String?
  flags                             Int
  tags                              String[]
  custom_install_url                String?
  role_connections_verification_url String?

  fetched_at DateTime @updatedAt
}

model DiscordSnowflake {
  id         String                 @id
  foundAs    DiscordSnowflakeType[]
  notFoundAs DiscordSnowflakeType[]
}

enum DiscordSnowflakeType {
  USER
  GUILD
  CHANNEL
  ROLE
  APPLICATION
  EMOJI
  STICKER
}

model GuildProfile {
  guild_id String @id
}

model UserProfile {
  user_id String @id
}

model LinkAlias { 
  id        String   @id @default(cuid())
  alias     String   @unique
  target_type LinkAliasType
  target       String   @db.Text
}

enum LinkAliasType {
  GUILD_INVITE
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
